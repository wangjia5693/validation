# 验证操作类  use Validation\Validator as v;

# 简单demo :
    $number = 123;
    v::numeric()->validate($number); // true

# 链式操作，添加多个验证条件：
    $usernameValidator = v::alnum()->noWhitespace()->length(1, 15);
    $usernameValidator->validate('alganet'); // true

# 对于对象的属性验证：
    $user = new stdClass;
    $user->name = 'Alexandre';
    $user->birthdate = '1987-07-01';
    $userValidator = v::attribute('name', v::stringType()->length(1,32))  ->attribute('birthdate', v::date()->age(19));
    $a = $userValidator->validate($user); // true

# 对于数组的验证：
    $user = array();
    $user['name'] = 'Alexandre';
    $user['birthdate'] = '1987-07-01';
    $userValidator = v::key('name', v::stringType()->length(1,32))  ->key('birthdate', v::date()->age(19));
    $a = $userValidator->validate($user); // true

# 对于空字符串及null的验证：
    v::alpha()->validate(''); // false
    v::alpha()->validate(null); // false

    v::optional(v::alpha())->validate(''); // true
    v::optional(v::alpha())->validate(null); // true

#间距验证；包括数字，字符串，日期，第三个参数意味是否包含
    v::intVal()->between(10, 20)->validate(15); // true
    v::stringType()->between('a', 'f')->validate('c'); // true
    v::date()->between(10, 20, true)->validate(20); // true

#正常而言，对于类型的判断，规则内含有两个同类型的判断类，val结尾的比type结尾的涵盖范围要广，eg:boolVal与boolType;
    v::boolVal()->validate('on'); // true
    v::boolVal()->validate('off'); // true
    v::boolVal()->validate('yes'); // true
    v::boolVal()->validate('no'); // true
    v::boolVal()->validate(1); // true
    v::boolVal()->validate(0); // true

#需要对数据近处处理之后在做验证的:调用v::call()

# 建立规则之后，可重复使用该规则，在validate()之前

# 异常处理（有两类异常：ValidationException,NestedValidationException）
    ValidationException,当check（）失败时触发；
    NestedValidationException，当assert（）失败时触发；
    异常处理的价值在于有时候程序不限于知道验证结果，同时需要抛出更多的信息；
    use Validation\Exceptions\NestedValidationException;

    try {
        $usernameValidator->assert('really messed up screen#name');
    } catch(NestedValidationException $exception) {
       echo $exception->getFullMessage();
    }
    我们看到validate(),它返回真或假,assert()抛出一个完整的验证报告。还有一个check()方法,它返回一个例外只有第一个错误的发现

http://respect.github.io/Validation/docs/validators.html

# 作为中间件形式引入
    //Create the validators
    $usernameValidator = v::alnum()->noWhitespace()->length(1, 10);
    $ageValidator = v::numeric()->positive()->between(1, 20);
    $validators = array(
      'username' => $usernameValidator,
      'age' => $ageValidator
    );

    $app->add(new Validation\ValidateMiddleware($validators));